<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  
  <meta name="renderer" content="webkit">
  <meta http-equiv="X-UA-Compatible" content="IE=edge" >
  <link rel="dns-prefetch" href="http://cuikeyi.com">
  <title>iOS推送总结 | 崔大王</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
  <meta name="description" content="最近项目集成客服系统涉及到推送消息，所有我把项目中的推送相关的代码和逻辑整合了一下，总结了一下iOS7-iOS10系统的推送注册和点击通知进入app时走的代理方法。由于在程序被kill时收到推送时不能链接xcode进行代码的断点调试，所以我使用http-server,在涉及到推送代理的每一个代理方法中，利用http-server获得app点击通知进入app时，走的每一个方法名。
http-serv">
<meta property="og:type" content="article">
<meta property="og:title" content="iOS推送总结">
<meta property="og:url" content="http://cuikeyi.com/2016/12/09/iOS推送总结">
<meta property="og:site_name" content="崔大王">
<meta property="og:description" content="最近项目集成客服系统涉及到推送消息，所有我把项目中的推送相关的代码和逻辑整合了一下，总结了一下iOS7-iOS10系统的推送注册和点击通知进入app时走的代理方法。由于在程序被kill时收到推送时不能链接xcode进行代码的断点调试，所以我使用http-server,在涉及到推送代理的每一个代理方法中，利用http-server获得app点击通知进入app时，走的每一个方法名。
http-serv">
<meta property="og:updated_time" content="2016-12-20T10:38:44.000Z">
<meta name="twitter:card" content="summary">
<meta name="twitter:title" content="iOS推送总结">
<meta name="twitter:description" content="最近项目集成客服系统涉及到推送消息，所有我把项目中的推送相关的代码和逻辑整合了一下，总结了一下iOS7-iOS10系统的推送注册和点击通知进入app时走的代理方法。由于在程序被kill时收到推送时不能链接xcode进行代码的断点调试，所以我使用http-server,在涉及到推送代理的每一个代理方法中，利用http-server获得app点击通知进入app时，走的每一个方法名。
http-serv">
  
    <link rel="alternative" href="/atom.xml" title="崔大王" type="application/atom+xml">
  
  
    <link rel="icon" href="/favicon.png">
  
  <link rel="stylesheet" href="/main.css">
  

</head>

<body>
  <div id="container">
    <div class="left-col">
      <div class="overlay"></div>
<div class="intrude-less">
	<header id="header" class="inner">
		<a href="/" class="profilepic">
			
			<img src="http://ohc6xoujj.bkt.clouddn.com/avatar.JPG" class="js-avatar">
			
		</a>

		<hgroup>
		  <h1 class="header-author"><a href="/">崔大王</a></h1>
		</hgroup>

		

		<nav class="header-menu">
			<ul>
			
			</ul>
		</nav>
		<nav class="header-smart-menu">
	        
    		
    			
    			<a class="js-smart-menu" data-idx="0" href="javascript:void(0)">所有文章</a>
    			
    			
            
    			
    			<a class="js-smart-menu" data-idx="1" href="javascript:void(0)">标签</a>
    			
    			
            
    			
    			<a class="js-smart-menu" data-idx="2" href="javascript:void(0)">关于我</a>
    			
    			
            
		</nav>
		<nav class="header-nav">
			<div class="social">
				
					<a class="weibo" target="_blank" href="http://weibo.com/cuikeyi520" title="weibo">weibo</a>
		        
			</div>
		</nav>
	</header>		
</div>

    </div>
    <div class="mid-col">
      <nav id="mobile-nav">
  	<div class="overlay">
  		<div class="slider-trigger"><i class="icon-list"></i></div>
  		<h1 class="header-author js-mobile-header hide">崔大王</h1>
  	</div>
	<div class="intrude-less">
		<header id="header" class="inner">
			<div class="profilepic">
				
					<img src="http://ohc6xoujj.bkt.clouddn.com/avatar.JPG" class="js-avatar">
				
			</div>
			<hgroup>
			  <h1 class="header-author">崔大王</h1>
			</hgroup>
			
			<nav class="header-menu">
				<ul>
				
				</ul>
			</nav>
			<nav class="header-nav">
				<div class="social">
					
						<a class="weibo" target="_blank" href="http://weibo.com/cuikeyi520" title="weibo">weibo</a>
			        
				</div>
			</nav>
		</header>				
	</div>
</nav>

      <div class="body-wrap">
        <article id="post-iOS推送总结" class="article article-type-post" itemscope itemprop="blogPost">
  <div class="article-inner">
    
      <input type="hidden" class="isFancy" />
    
    
      <header class="article-header">
        
  
    <h1 class="article-title" itemprop="name">
      iOS推送总结
    </h1>
  

      </header>
    
    <div class="article-entry" itemprop="articleBody">
      
        <p>最近项目集成客服系统涉及到推送消息，所有我把项目中的推送相关的代码和逻辑整合了一下，总结了一下iOS7-iOS10系统的推送注册和点击通知进入app时走的代理方法。由于在程序被kill时收到推送时不能链接xcode进行代码的断点调试，所以我使用http-server,在涉及到推送代理的每一个代理方法中，利用http-server获得app点击通知进入app时，走的每一个方法名。</p>
<h4 id="http-server安装和使用"><a href="#http-server安装和使用" class="headerlink" title="http-server安装和使用"></a>http-server安装和使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install http-server -g</span><br></pre></td></tr></table></figure>
<p>使用npm 安装http-server（确保是全局安装），直接在终端执行命令 http-server，如下图，找到与自己电脑的ip一致的地址，直接请求那个地址（GET），就可以在终端中看见你发来的请求了，当然参数也一起发过来了。我就是用这种方法，来定位程序点击推送时，走的是哪个代理方法。（先确认你的工程支持http请求）<br>image<br>例如我在代理中使用这个方法来发送请求，把方法名作为参数传到终端，请求URL后拼接时间是防止有缓存。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)uploadMethodName:(<span class="built_in">NSString</span> *)methodName</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *path = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"http://10.2.0.49:8080/?methodName=%@&amp;%lf"</span>, methodName, [[<span class="built_in">NSDate</span> date] timeIntervalSince1970]];</span><br><span class="line">    [[XHCNetWorking sharedClient] requestWithPath:path params:<span class="literal">nil</span> httpMethod:XHCRequestGet callback:^(<span class="built_in">BOOL</span> rs, <span class="built_in">NSObject</span> *obj) &#123;</span><br><span class="line">        DLog(<span class="string">@"%@"</span>, obj);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="注册推送"><a href="#注册推送" class="headerlink" title="注册推送"></a>注册推送</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#define IOS_GREATER_THAN_OR_EQUAL_TO(v) ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedAscending)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 注册用户通知 */</span></span><br><span class="line">- (<span class="keyword">void</span>)registerUserNotification</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     注册通知(推送)</span><br><span class="line">     申请App需要接受来自服务商提供推送消息</span><br><span class="line">     */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// iOS10的注册方法</span></span><br><span class="line">    <span class="keyword">if</span> (IOS_GREATER_THAN_OR_EQUAL_TO(<span class="string">@"10"</span>)) &#123;</span><br><span class="line">        UNUserNotificationCenter *notificationCenter = [UNUserNotificationCenter currentNotificationCenter];</span><br><span class="line">        notificationCenter.delegate = XH<span class="built_in">CAPPDELEGATE</span>;</span><br><span class="line">        [notificationCenter requestAuthorizationWithOptions:UNAuthorizationOptionBadge | UNAuthorizationOptionSound |UNAuthorizationOptionAlert completionHandler:^(<span class="built_in">BOOL</span> granted, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (granted) &#123;</span><br><span class="line">                DLog(<span class="string">@"request authorization succeeded!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                DLog(<span class="string">@"request authorization fail!"</span>);</span><br><span class="line">                <span class="keyword">if</span> (error) &#123;</span><br><span class="line">                    DLog(<span class="string">@"authorization error = %@"</span>, error.localizedDescription);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">        [[<span class="built_in">UIApplication</span> sharedApplication] registerForRemoteNotifications];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// iOS8以上系统的注册方法</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (IOS_GREATER_THAN_OR_EQUAL_TO(<span class="string">@"8"</span>) ||</span><br><span class="line">        [<span class="built_in">UIApplication</span> instancesRespondToSelector:<span class="keyword">@selector</span>(registerUserNotificationSettings:)]) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义用户通知类型(Remote.远程 - Badge.标记 Alert.提示 Sound.声音)</span></span><br><span class="line">        <span class="built_in">UIUserNotificationType</span> types = <span class="built_in">UIUserNotificationTypeAlert</span> | <span class="built_in">UIUserNotificationTypeBadge</span> | <span class="built_in">UIUserNotificationTypeSound</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义用户通知设置</span></span><br><span class="line">        <span class="built_in">UIUserNotificationSettings</span> *settings = [<span class="built_in">UIUserNotificationSettings</span> settingsForTypes:types categories:<span class="literal">nil</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 注册用户通知 - 根据用户通知设置</span></span><br><span class="line">        [[<span class="built_in">UIApplication</span> sharedApplication] registerForRemoteNotifications];</span><br><span class="line">        [[<span class="built_in">UIApplication</span> sharedApplication] registerUserNotificationSettings:settings];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="comment">// iOS8.0 以前远程推送设置方式</span></span><br><span class="line">        <span class="comment">// 定义远程通知类型(Remote.远程 - Badge.标记 Alert.提示 Sound.声音)</span></span><br><span class="line">        <span class="built_in">UIRemoteNotificationType</span> myTypes = <span class="built_in">UIRemoteNotificationTypeBadge</span> | <span class="built_in">UIRemoteNotificationTypeAlert</span> | <span class="built_in">UIRemoteNotificationTypeSound</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 注册远程通知 -根据远程通知类型</span></span><br><span class="line">        [[<span class="built_in">UIApplication</span> sharedApplication] registerForRemoteNotificationTypes:myTypes];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="推送的代理方法"><a href="#推送的代理方法" class="headerlink" title="推送的代理方法"></a>推送的代理方法</h4><p>推送主要涉及到一下种方法：<br>1，iOS7-iOS9系统：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// iOS7-iOS9点击消息进入app，走此方法</span></span><br><span class="line">- (<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application didReceiveRemoteNotification:(<span class="built_in">NSDictionary</span> *)userInfo fetchCompletionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">UIBackgroundFetchResult</span> result))completionHandler</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 监听走的是什么方法</span></span><br><span class="line">    [<span class="keyword">self</span> uploadMethodName:<span class="string">@"application_didReceiveRemoteNotification_fetchCompletionHandler"</span>];</span><br><span class="line">    <span class="comment">// 当app被压入后台存活时，收到通知就回相应这个方法，需要进行一下判断此时是什么状态。（iOS7-10，收到消息都会默认走一遍这个方法）</span></span><br><span class="line">    <span class="keyword">if</span> (userInfo &amp;&amp; application.applicationState == <span class="built_in">UIApplicationStateActive</span>) &#123;</span><br><span class="line">    <span class="comment">//这是程序运行的时候，收到通知[这时推送直接调此方法]</span></span><br><span class="line">    DLog(<span class="string">@"在前台"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (userInfo &amp;&amp; application.applicationState==<span class="built_in">UIApplicationStateInactive</span>) &#123;</span><br><span class="line">    DLog(<span class="string">@"点击通知进入app，在此处处理跳转逻辑"</span>);</span><br><span class="line">    [[AppNotificationManager sharedInstance] handleReceiveRemoteNotification:userInfo];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (userInfo&amp;&amp;application.applicationState==<span class="built_in">UIApplicationStateBackground</span>) &#123;</span><br><span class="line">    DLog(<span class="string">@"在后台"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这个block必须实现</span></span><br><span class="line">    completionHandler(<span class="built_in">UIBackgroundFetchResultNewData</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>2，iOS10系统：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// iOS10点击通知进入app时，调用的方法，iOS10在此处处理跳转逻辑</span></span><br><span class="line">- (<span class="keyword">void</span>)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(<span class="keyword">void</span> (^)())completionHandler &#123;</span><br><span class="line">    [<span class="keyword">self</span> uploadMethodName:<span class="string">@"userNotificationCenter_didReceiveNotificationResponse_withCompletionHandler"</span>];</span><br><span class="line">    <span class="comment">//点击通知进入应用</span></span><br><span class="line">    </span><br><span class="line">    UNNotification *notification = response.notification;</span><br><span class="line">    UNNotificationRequest *request = notification.request;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    UNNotificationContent *content = request.content;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSDictionary</span> *userInfo = content.userInfo;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>3，当app被kill掉时，通过点击通知启动app时，在application_didFinishLaunchingWithOptions方法中，推送信息会包含在options属性中<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)options</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// options 中包含推送的信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>走完这个函数之后，系统还是会走1，2中aps的代理方法，要避免对通知逻辑进行重复处理，我觉得在启动函数中，不应处理逻辑跳转，统一在推送代理中进行统一处理。下面是我实践出的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">kill：</span><br><span class="line">ios7.1:</span><br><span class="line">		application_didReceiveRemoteNotification_fetchCompletionHandler</span><br><span class="line">		application_didFinishLaunchingWithOptions</span><br><span class="line">		application_didRegisterForRemoteNotificationsWithDeviceToken</span><br><span class="line"></span><br><span class="line">ios8.4: </span><br><span class="line">		application_didReceiveRemoteNotification_fetchCompletionHandler</span><br><span class="line">		application_didRegisterForRemoteNotificationsWithDeviceToken</span><br><span class="line">		application_didFinishLaunchingWithOptions</span><br><span class="line"></span><br><span class="line">ios9.3.5:</span><br><span class="line">		application_didReceiveRemoteNotification_fetchCompletionHandler</span><br><span class="line">		application_didFinishLaunchingWithOptions</span><br><span class="line">		application_didRegisterForRemoteNotificationsWithDeviceToken</span><br><span class="line"></span><br><span class="line">ios10:  </span><br><span class="line">		application_didFinishLaunchingWithOptions</span><br><span class="line">		application_didRegisterForRemoteNotificationsWithDeviceToken</span><br><span class="line">		userNotificationCenter_didReceiveNotificationResponse_withCompletionHandler</span><br><span class="line"></span><br><span class="line">压入后台</span><br><span class="line">ios7.1.2:	</span><br><span class="line">		application_didReceiveRemoteNotification_fetchCompletionHandler</span><br><span class="line">ios8.4.1</span><br><span class="line">		application_didReceiveRemoteNotification_fetchCompletionHandler</span><br><span class="line">ios9.3.5</span><br><span class="line">		application_didReceiveRemoteNotification_fetchCompletionHandler</span><br><span class="line">ios10.0.1</span><br><span class="line">		userNotificationCenter_didReceiveNotificationResponse_withCompletionHandler</span><br></pre></td></tr></table></figure></p>
<p>以上是对iOS推送自己的一些理解，好记性不如烂笔头，就当做个笔记📒吧，iOS10中增加了自定义推送，后期补充上，未完待续。</p>

      
    </div>
    <div class="article-info article-info-index">
      
      <a href="/2016/12/09/iOS推送总结" class="archive-article-date">
  	<time datetime="2016-12-09T09:41:29.000Z" itemprop="datePublished"><i class="icon-clock"></i>2016-12-09</time>
</a>
      
	<div class="article-tag tagcloud">
		<i class="icon-price-tags"></i>
		<ul class="article-tag-list"><li class="article-tag-list-item"><a class="article-tag-list-link" href="/tags/推送/">推送</a></li></ul>
	</div>

      

      <div class="clearfix"></div>
    </div>
  </div>
</article>

  
<nav id="article-nav">
  
    <a href="/2017/02/13/iOS的UniversalLink开发总结" id="article-nav-newer" class="article-nav-link-wrap">
      <i class="icon-circle-left"></i>
      <div class="article-nav-title">
        
          iOS的UniversalLink开发总结
        
      </div>
    </a>
  
  
    <a href="/2016/12/05/HHRouter应用与自我理解完善" id="article-nav-older" class="article-nav-link-wrap">
      <div class="article-nav-title">HHRouter应用与自我理解完善</div>
      <i class="icon-circle-right"></i>
    </a>
  
</nav>




<div class="share_jia">
	<!-- JiaThis Button BEGIN -->
	<div class="jiathis_style">
		<span class="jiathis_txt">Share to: &nbsp; </span>
		<a class="jiathis_button_facebook"></a> 
	    <a class="jiathis_button_twitter"></a>
	    <a class="jiathis_button_plus"></a> 
	    <a class="jiathis_button_tsina"></a>
		<a class="jiathis_button_cqq"></a>
		<a class="jiathis_button_douban"></a>
		<a class="jiathis_button_weixin"></a>
		<a class="jiathis_button_tumblr"></a>
    <a href="http://www.jiathis.com/share" class="jiathis jiathis_txt jtico jtico_jiathis" target="_blank"></a>
	</div>
	<script type="text/javascript" src="//v3.jiathis.com/code/jia.js?uid=1405949716054953" charset="utf-8"></script>
	<!-- JiaThis Button END -->
</div>









      </div>
      <footer id="footer">
  <div class="outer">
    <div id="footer-info">
    	<div class="footer-left">
    		&copy; 2017 崔大王
    	</div>
      	<div class="footer-right">
      		<a href="http://hexo.io/" target="_blank">Hexo</a>  Theme <a href="https://github.com/litten/hexo-theme-yilia" target="_blank">Yilia</a> by Litten
      	</div>
    </div>
  </div>
</footer>
    </div>
    <script>
	var yiliaConfig = {
		fancybox: true,
		mathjax: false,
		animate: true,
		isHome: false,
		isPost: true,
		isArchive: false,
		isTag: false,
		isCategory: false,
		open_in_new: false,
		root: "/",
		innerArchive: true
	}
</script>

<script src="/./main.js"></script>


    
<div class="tools-col">
  <ul class="btn-wrap">
    
      <li class="chose" data-hook="tools-section-all"><span class="text">全部</span><i class="icon-book"></i></li>
    
    
      <li data-hook="tools-section-tag"><span class="text">标签</span><i class="icon-price-tags"></i></li>
    
    
    
      <li data-hook="tools-section-me"><span class="text">我</span><i class="icon-smile"></i></li>
    
  </ul>
  <div class="tools-wrap">
    
    	<section class="tools-section tools-section-all chose">
    	</section>
    

    
    	<section class="tools-section tools-section-tag">
    			<div class="widget tagcloud" id="js-tagcloud">
    				<a href="/tags/Autolayout/" style="font-size: 10px;">Autolayout</a> <a href="/tags/HHRouter/" style="font-size: 10px;">HHRouter</a> <a href="/tags/iOS/" style="font-size: 20px;">iOS</a> <a href="/tags/runtime/" style="font-size: 10px;">runtime</a> <a href="/tags/排序/" style="font-size: 10px;">排序</a> <a href="/tags/推送/" style="font-size: 10px;">推送</a>
    			</div>
    	</section>
    

    

    
    	<section class="tools-section tools-section-me">
  	  	
  	  		<div class="aboutme-wrap" id="js-aboutme">大家好&lt;br&gt;&lt;br&gt;非著名iOS开发者&lt;br&gt;每天都需要不断的学习</div>
  	  	
    	</section>
    
  </div>
  
</div>
    <!-- Root element of PhotoSwipe. Must have class pswp. -->
<div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">

    <!-- Background of PhotoSwipe. 
         It's a separate element as animating opacity is faster than rgba(). -->
    <div class="pswp__bg"></div>

    <!-- Slides wrapper with overflow:hidden. -->
    <div class="pswp__scroll-wrap">

        <!-- Container that holds slides. 
            PhotoSwipe keeps only 3 of them in the DOM to save memory.
            Don't modify these 3 pswp__item elements, data is added later on. -->
        <div class="pswp__container">
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
        </div>

        <!-- Default (PhotoSwipeUI_Default) interface on top of sliding area. Can be changed. -->
        <div class="pswp__ui pswp__ui--hidden">

            <div class="pswp__top-bar">

                <!--  Controls are self-explanatory. Order can be changed. -->

                <div class="pswp__counter"></div>

                <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>

                <button class="pswp__button pswp__button--share" style="display:none" title="Share"></button>

                <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>

                <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>

                <!-- Preloader demo http://codepen.io/dimsemenov/pen/yyBWoR -->
                <!-- element will get class pswp__preloader--active when preloader is running -->
                <div class="pswp__preloader">
                    <div class="pswp__preloader__icn">
                      <div class="pswp__preloader__cut">
                        <div class="pswp__preloader__donut"></div>
                      </div>
                    </div>
                </div>
            </div>

            <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
                <div class="pswp__share-tooltip"></div> 
            </div>

            <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)">
            </button>

            <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)">
            </button>

            <div class="pswp__caption">
                <div class="pswp__caption__center"></div>
            </div>

        </div>

    </div>

</div>
  </div>
</body>
</html>